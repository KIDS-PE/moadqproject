if (is.null(inFile))
return(NULL)
table1<- read.csv(inFile$datapath, header = input$header)
table(table1$sex, table1$age)
})
output$distPlot <- renderPlot({
inFile <- input$file1
if (is.null(inFile))
return(NULL)
table1<- read.csv(inFile$datapath, header = input$header)
mosaicplot(table1$sex~table1$age)
})
}
# Run the application
shinyApp(ui = ui, server = server)
drv<-dbDriver("PostgreSQL")
con<-dbConnect(drv, dbname=mydbname, host=myhost, port=myport, user=myusername)  # input password if needed
multi_map<-unique(dbGetQuery(con, "select * from vocab_ko.kcd_to_snomed_map where count_map>1"))
head(multi_map)
write.csv(multi_map, "multi_map.csv", row.names=FALSE)
tt<-dbGetQuery(con, "SELECT * FROM VOCAB_KO.CONCEPT WHERE VOCABULARY_ID IN ('KCD7', 'SNOMED')")
write.csv(tt, "omop_kcd_snomed.csv", row.names=FALSE)
tt<-dbGetQuery(con, "SELECT * FROM VOCAB_KO.CONCEPT WHERE SUBSTRING(VOCABULARY_ID, 1, 6)='RxNorm'")
write.csv(tt, "omop_RXNORM.csv", row.names=FALSE)
length(unique(tt$concept_id))
dbGetQuery(con, "SELECT * FROM VOCAB_KO.CONCEPT WHERE SUBTVOCABULARY_ID='RxNorm'")
dbGetQuery(con, "SELECT COUNT(DISTINCT CONCEPT_ID) FROM VOCAB_KO.CONCEPT
WHERE CONCEPT_ID IN (SELECT DISTINCT CONCEPT_ID_1 FROM VOCAB_KO.KCD_TO_SNOMED_MAP)
AND VOCABULARY_ID='KCD7'")
write.csv(tt, "Rxnorm.csv", row.names=FALSE)
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choose CSV File",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv")
),
tags$hr(),
textInput(hostname, "host", value="localhost", width=10),
textInput(portnum, "port", value="5432", width=10),
textInput(username, "user", value="postgres", width=10),
textInput(password, "password", value="", width=10),
textInput(dbname, "DB name", value="kids_ehr", width=10),
textInput(schemaname, "schema", value="ehr", width=10)
),
# Show a plot of the generated distribution
mainPanel(
tableOutput("contents"),
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$contents <- renderTable({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, it will be a data frame with 'name',
# 'size', 'type', and 'datapath' columns. The 'datapath'
# column will contain the local filenames where the data can
# be found.
inFile <- input$file1
drv<-dbDriver("PostgreSQL")
con<-dbConnect(drv, dbname=input$dbname, host=input$hostname,
port=input$portnum, user=input$username, password=input$password)  # input password if needed
if (is.null(inFile))
return(NULL)
table1<- read.csv(inFile$datapath, header = input$header)
table(table1$sex, table1$age)
})
output$distPlot <- renderPlot({
inFile <- input$file1
if (is.null(inFile))
return(NULL)
table1<- read.csv(inFile$datapath, header = input$header)
mosaicplot(table1$sex~table1$age)
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choose CSV File",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv")
),
tags$hr(),
textInput(hostname, "host", value="localhost", width=10),
textInput(portnum, "port", value="5432", width=10),
textInput(username, "user", value="postgres", width=10),
textInput(password, "password", value="", width=10),
textInput(dbname, "DB name", value="kids_ehr", width=10),
textInput(schemaname, "schema", value="ehr", width=10)
),
# Show a plot of the generated distribution
mainPanel(
tableOutput("contents"),
plotOutput("distPlot")
)
)
)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choose CSV File",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv")
),
tags$hr(),
textInput("hostname", "host", value="localhost", width=10),
textInput("portnum", "port", value="5432", width=10),
textInput("username", "user", value="postgres", width=10),
textInput("password", "password", value="", width=10),
textInput("dbname", "DB name", value="kids_ehr", width=10),
textInput("schemaname", "schema", value="ehr", width=10)
),
# Show a plot of the generated distribution
mainPanel(
tableOutput("contents"),
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$contents <- renderTable({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, it will be a data frame with 'name',
# 'size', 'type', and 'datapath' columns. The 'datapath'
# column will contain the local filenames where the data can
# be found.
inFile <- input$file1
drv<-dbDriver("PostgreSQL")
con<-dbConnect(drv, dbname=input$dbname, host=input$hostname,
port=input$portnum, user=input$username, password=input$password)  # input password if needed
if (is.null(inFile))
return(NULL)
table1<- read.csv(inFile$datapath, header = input$header)
table(table1$sex, table1$age)
})
output$distPlot <- renderPlot({
inFile <- input$file1
if (is.null(inFile))
return(NULL)
table1<- read.csv(inFile$datapath, header = input$header)
mosaicplot(table1$sex~table1$age)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choose CSV File",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv")
),
tags$hr(),
textInput("hostname", "host", value="localhost", width=50),
textInput("portnum", "port", value="5432", width=50),
textInput("username", "user", value="postgres", width=50),
textInput("password", "password", value="", width=50),
textInput("dbname", "DB name", value="kids_ehr", width=50),
textInput("schemaname", "schema", value="ehr", width=50)
),
# Show a plot of the generated distribution
mainPanel(
tableOutput("contents"),
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$contents <- renderTable({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, it will be a data frame with 'name',
# 'size', 'type', and 'datapath' columns. The 'datapath'
# column will contain the local filenames where the data can
# be found.
inFile <- input$file1
drv<-dbDriver("PostgreSQL")
con<-dbConnect(drv, dbname=input$dbname, host=input$hostname,
port=input$portnum, user=input$username, password=input$password)  # input password if needed
if (is.null(inFile))
return(NULL)
table1<- read.csv(inFile$datapath, header = input$header)
table(table1$sex, table1$age)
})
output$distPlot <- renderPlot({
inFile <- input$file1
if (is.null(inFile))
return(NULL)
table1<- read.csv(inFile$datapath, header = input$header)
mosaicplot(table1$sex~table1$age)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choose CSV File",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv")
),
tags$hr(),
textInput("hostname", "host", value="localhost", width=150),
textInput("portnum", "port", value="5432", width=150),
textInput("username", "user", value="postgres", width=150),
textInput("password", "password", value="", width=150),
textInput("dbname", "DB name", value="kids_ehr", width=150),
textInput("schemaname", "schema", value="ehr", width=150)
),
# Show a plot of the generated distribution
mainPanel(
tableOutput("contents"),
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$contents <- renderTable({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, it will be a data frame with 'name',
# 'size', 'type', and 'datapath' columns. The 'datapath'
# column will contain the local filenames where the data can
# be found.
inFile <- input$file1
drv<-dbDriver("PostgreSQL")
con<-dbConnect(drv, dbname=input$dbname, host=input$hostname,
port=input$portnum, user=input$username, password=input$password)  # input password if needed
if (is.null(inFile))
return(NULL)
table1<- read.csv(inFile$datapath, header = input$header)
table(table1$sex, table1$age)
})
output$distPlot <- renderPlot({
inFile <- input$file1
if (is.null(inFile))
return(NULL)
table1<- read.csv(inFile$datapath, header = input$header)
mosaicplot(table1$sex~table1$age)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$contents <- renderTable({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, it will be a data frame with 'name',
# 'size', 'type', and 'datapath' columns. The 'datapath'
# column will contain the local filenames where the data can
# be found.
inFile <- input$file1
drv<-dbDriver("PostgreSQL")
con<-dbConnect(drv, dbname=input$dbname, host=input$hostname,
port=input$portnum, user=input$username, password=input$password)  # input password if needed
if (is.null(inFile))
return(NULL)
table1<- read.csv(inFile$datapath, header = TRUE)
table(table1$sex, table1$age)
})
output$distPlot <- renderPlot({
inFile <- input$file1
if (is.null(inFile))
return(NULL)
table1<- read.csv(inFile$datapath, header = input$header)
mosaicplot(table1$sex~table1$age)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
drv<-dbDriver("PostgreSQL")
con<-dbConnect(drv, dbname=input$dbname, host=input$hostname,
port=input$portnum, user=input$username, password=input$password)  # input password if needed
output$contents <- renderTable({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, it will be a data frame with 'name',
# 'size', 'type', and 'datapath' columns. The 'datapath'
# column will contain the local filenames where the data can
# be found.
inFile <- input$file1
if (is.null(inFile))
return(NULL)
table1<- read.csv(inFile$datapath, header = TRUE)
table(table1$sex, table1$age)
})
output$distPlot <- renderPlot({
inFile <- input$file1
if (is.null(inFile))
return(NULL)
table1<- read.csv(inFile$datapath, header = input$header)
mosaicplot(table1$sex~table1$age)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Hospital initial
hname="KIDS"
data.start= # first year of data
data.end=   # last year of data
# db connection
mydbtype='postgresql'  # db type:  "oracle", "postgresql", "pdw", "impala", "netezza", "bigquery", "redshift", "mssql"
mydbname='sch_ehr'     # local cdm dababase name
myhost='localhost'     # local cdm db host
myport= 5432           # local cdm db port
myusername='postgres'  # local cdm db username
myschemaname='ehr'    # OMOP CDM schema name
myvocabschemaname='vocab' # OMOP CDM vocabulary schema name
# working directory
mywd="D://CDM//2021//Level 1//meloxicam" # plaese change working directory
# connect db
drv<-dbDriver("PostgreSQL")
con<-dbConnect(drv, dbname=mydbname, host=myhost, port=myport, user=myusername)  # input password if needed
if(type_of_analysis$drug=='Y'){
druglist<-read.csv("druglist.csv", header=TRUE)
sql<-translate(
render("SELECT * from @A.drug_exposure where drug_concept_id in @B",
A=myschemaname, B=code_vec(druglist$code)),
targetDialect=mydbtype)
x<-dbGetQuery(con, sql)
x<-unique(x)
myresult$edilist<-unique(x$drug_source_value)                   # edi list
myresult$concept_ids<-unique(x$drug_concept_id)                 # concept id list
myresult$tot_usersnum<-length(unique(x$person_id))              # total users number
myresult$tot_dispensing<-nrow(x)
myresult$tot_dispensing_by_ingredient<-table((merge(druglist, x[,c("person_id", "drug_concept_id")],
by.x="code", by.y="drug_concept_id", all.x=FALSE, all.y=TRUE))$ingredient)
myresult$tot_usresnum_by_ingredient<-table((unique(merge(druglist, x[,c("person_id", "drug_concept_id")],
by.x="code", by.y="drug_concept_id", all.x=FALSE, all.y=TRUE)))$ingredient)
# sex and age at first exposure, total set
sql<-translate(
render("select person_id, gender_concept_id, year_of_birth, month_of_birth, day_of_birth from @A.person where person_id in @B",
A=myschemaname, B=code_vec(unique(x$person_id))),
targetDialect = mydbtype)
tot_cohort<-unique(dbGetQuery(con, sql))
tot_cohort$person_birth<-as.Date(paste0(tot_cohort$year_of_birth, "-", tot_cohort$month_of_birth, "-", tot_cohort$day_of_birth))
# age group (at first exposure)
tot_first_exposure<-ddply(x, ~person_id, summarize, first_exposure_date=min(drug_exposure_start_date))
tot_cohort<-merge(tot_cohort, tot_first_exposure, by='person_id', all.x=TRUE)
tot_cohort$age_at_first_exposure<-as.numeric(tot_cohort$first_exposure_date-tot_cohort$person_birth)/365
if(max(tot_cohort$age_at_first_exposure)>100){breaks1<-c(seq(0,100, by=10), max(tot_cohort$age_at_first_exposure))
}else{breaks1<-c(seq(0,100,by=10))}
breaks1
######################################################################################
################################ KIDS MOA-CDM LEVEL 1 ################################
################################## V1.0.  JAN, 2022 ##################################
######################################################################################
######################################################################################
################################ ANALYSIS SETTING ####################################
######################################################################################
############################
# Local configurations
############################
# call libraries
library("RPostgreSQL")
library("RDocumentation")
library('plyr')
library('dplyr')
library('SqlRender')
library('DBI')
# Hospital information
hname="kids"
data.start= 2013 # first year of data
data.end= 2018   # last year of data
# db connection
mydbtype='postgresql'  # db type:  "oracle", "postgresql", "pdw", "impala", "netezza", "bigquery", "redshift", "mssql"
mydbname='sch_ehr'     # local cdm dababase name
myhost='localhost'     # local cdm db host
myport= 5432           # local cdm db port
myusername='postgres'  # local cdm db username
mypassword=''  # local cdm db password
myschemaname='ehr'    # OMOP CDM schema name
myvocabschemaname='vocab' # OMOP CDM vocabulary schema name
mytmpschemaname='analysis' # schema to save temp tables of drug code, etc. for analysis (necessary)
# working directory
mywd="D://CDM//2022//Level 1//SGLT2i" # plaese change working directory
# connect db
drv<-dbDriver("PostgreSQL")
con<-dbConnect(drv, dbname=mydbname, host=myhost, port=myport, user=myusername)  # input password if needed
######################################################################################
################################ KIDS MOA-CDM LEVEL 1 ################################
################################## V1.0.  JAN, 2022 ##################################
######################################################################################
######################################################################################
################################ ANALYSIS SETTING ####################################
######################################################################################
############################
# Local configurations
############################
# call libraries
library("RPostgreSQL")
library("RDocumentation")
library('plyr')
library('dplyr')
library('SqlRender')
library('DBI')
# Hospital information
hname="kids"
data.start= 2013 # first year of data
data.end= 2018   # last year of data
# db connection
mydbtype='postgresql'  # db type:  "oracle", "postgresql", "pdw", "impala", "netezza", "bigquery", "redshift", "mssql"
mydbname='sch_ehr'     # local cdm dababase name
myhost='localhost'     # local cdm db host
myport= 5432           # local cdm db port
myusername='postgres'  # local cdm db username
mypassword=''  # local cdm db password
myschemaname='ehr'    # OMOP CDM schema name
myvocabschemaname='vocab' # OMOP CDM vocabulary schema name
mytmpschemaname='analysis' # schema to save temp tables of drug code, etc. for analysis (necessary)
# working directory
mywd="D://CDM//2022//Level 1//SGLT2i" # plaese change working directory
# connect db
drv<-dbDriver("PostgreSQL")
con<-dbConnect(drv, dbname=mydbname, host=myhost, port=myport, user=myusername)  # input password if needed
library(roxygen2)
library(devtools)
setwd("C://CDM//2021//MOA_DQM//moadqproject")
setwd("D://CDM//2021//DQM//MOA_DQM//moadqproject")
setwd("D://CDM//2021//DQM//MOA_DQ//moadqproject")
check_info<-readRDS('check_info.RDS')
check_info<-readRDS('data/result/check_info.RDS')
?usethis
?use_data
usethis::use_data_raw(check_info)
usethis::use_data(check_info)
con_info<-readRDS('data/result/con_info.RDS')
usethis::use_data(con_info)
remove(con_info)
completeness_result<-readRDS('data/result/completeness.rds')
usethis::use_data(completeness_result)
consistency_result<-readRDS('data/result/consistency.rds')
usethis::use_data(consistency_result)
uniqueness_result<-readRDS('data/result/uniqueness.rds')
usethis::use_data(uniqueness_result)
table_count<-readRDS('data/result/table_count.RDS')
usethis::use_data(table_count)
accuracy_rule<-read.csv('data/rule/accuracy.csv', header=TRUE)
usethis::use_data(accuracy_rule)
progress<-read.table('data/result/progress.txt', header=TRUE)
usethis::use_data(progress)
completeness_rule<-read.csv("data/rule/completeness.csv", header=TRUE)
#completeness_rule<-read.csv("data/rule/completeness.csv", header=TRUE)
usethis::use_data(completeness_rule)
consistency_rule<-read.csv('data/rule/consistency.csv', header=TRUE)
usethis::use_data(consistency_rule)
table_count<-readRDS('data/result/table_count.rds')
usethis::use_data(table_count)
uniqueness_rule<-read.csv('data/rule/uniqueness.csv', header=TRUE)
usethis::use_data(uniqueness_rule)
usethis::use_data(uniqueness_result)
validity_rule<-read.csv('data/rule/validity.csv', header=TRUE)
#validity_rule<-read.csv('data/rule/validity.csv', header=TRUE)
usethis::use_Data(validity_rule)
#validity_rule<-read.csv('data/rule/validity.csv', header=TRUE)
usethis::use_data(validity_rule)
validity_result<-readRDS('data/result/validity.rds')
#saveRDS(validity_result, file = paste0('data/result/validity.rds'))
usethis::use_data(validity_result, overwrite=TRUE)
consistency_score<-readRDS("data/result/consistency_score.rds")
completeness_score<-readRDS("data/result/completeness_score.rds")
uniqueness_score<-readRDS("data/result/uniqueness_score.rds")
validity_score<-readRDS("data/result/validity_score.rds")
accuracy_score<-readRDS("data/result/accuracy_score.rds")
usethis::use_data(consistency_score, overwrite=TRUE)
usethis::use_data(completeness_score, overwrite=TRUE)
usethis::use_data(uniqueness_score, overwrite=TRUE)
usethis::use_data(validity_score, overwrite=TRUE)
usethis::use_data(accuracy_score, overwrite=TRUE)
overview<-readRDS('data/result/dashboard_overview.rds')
usethis::use_data(overview, overwrite = TRUE)
no_rules<-readRDS('data/result/no_rules.rds'))
no_rules<-readRDS('data/result/no_rules.rds')
usethis::use_data(no_rules, overwrite=TRUE)
accuracy_result<-readRDS('data/result/accuracy.RDS')
usethis::use_data(accuracy_result, overwrite = TRUE)
